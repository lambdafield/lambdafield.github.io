If-you-ask,-inspect-module-can-answer
01/12/2014, 19:03:07
python
inspect
When you get an object, you might wonder what it is. First off, you can ask whether a isfunction or an isclass. If it is a function, what are arguments?

    #target function
    def read(arg1, arg2='math'):
        print(arg1, arg2)
    import inspect
    if inspect.isfunction(read):
        arg_spec = inspect.getargspec(read)
        print('name    :', arg_spec[0])
        print('*       :', arg_spec[1])
        print('**      :', arg_spec[2])
        print('defaults:', arg_spec[3])
       
Also, you can check Class Hierarchies with getclasstree() and getmro().
When I create a new class, I wonder what is the difference between using type function and declaring class. I assume that one of them has less methods.

    from inspect from getmembers
    class X(object):
        """declare X class"""
        x = 1
   
    y = type('Y', (objects,'), {'__doc__':"created by type", 'x':1})
   
    print(getmembers(X))
    print(getmembers(y))

Both of them are exactly the same. Two class objects have the same methods.
However, I know the process of creation is a little bit different. Which means, when you declare class and then create, X class calls type.__new__(), type.__init__(). On the other hand, the type function does not call type.__init__().

The Inspect module is like an oracle.